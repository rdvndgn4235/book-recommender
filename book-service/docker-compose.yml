services:
  book-postgres-db:
    image: postgres:15
    container_name: book-postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - book_postgres_data:/var/lib/postgresql/data

  book-redis-db:
    image: redis:latest
    container_name: book-redis-db
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - app-network

  book-mongodb:
    image: mongo:latest
    container_name: book-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - book_mongo_data:/data/db
    networks:
      - app-network

  book-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: book-service
    ports:
      - "${SPRING_APP_PORT}:${SPRING_APP_PORT}"
    depends_on:
      book-postgres-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB: ${MONGO_DB}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      SPRING_APP_PORT: ${SPRING_APP_PORT}
    networks:
      - app-network

volumes:
  book_postgres_data:
  book_mongo_data:

networks:
  app-network:
    driver: bridge
